#BlueJ class context
comment0.target=MazeCell
comment0.text=\r\n\ Represents\ a\ single\ cell\ (square)\ in\ a\ maze.\r\n\ It\ is\ a\ node\ in\ a\ graph\ of\ MazeCells\ -\ each\ MazeCell\ has\ a\ set\ of\ neighbours.\r\n\ The\ useful\ methods\ are\:\r\n\ \ -\ visit(),\ unvisit(),\ and\ isVisited()\r\n\ \ \ \ (to\ record\ if\ a\ MazeCell\ has\ been\ visted\ during\ a\ search)\r\n\ \ -\ draw(Color)\ \ to\ redraw\ the\ cell\ in\ a\ given\ colour\r\n
comment1.params=
comment1.target=int\ numberOfChildren()
comment10.params=
comment10.target=int\ getRow()
comment10.text=\r\n\ Get\ row\ and\ column\r\n
comment11.params=
comment11.target=int\ getCol()
comment12.params=neigh
comment12.target=void\ addNeighbour(MazeCell)
comment12.text=\r\n\ Add\ a\ neighbour,\r\n\ used\ when\ building\ the\ graph\r\n
comment13.params=
comment13.target=java.lang.String\ toString()
comment13.text=\r\n\ toString\ for\ debugging\r\n
comment2.params=row\ col
comment2.target=MazeCell(int,\ int)
comment2.text=\r\n\ Make\ a\ MazeCell\ located\ at\ the\ given\ row\ and\ column\r\n
comment3.params=
comment3.target=void\ visit()
comment3.text=\r\n\ Visiting\ and\ unvisiting\r\n
comment4.params=
comment4.target=void\ unvisit()
comment5.params=
comment5.target=boolean\ isVisited()
comment6.params=
comment6.target=void\ flag()
comment7.params=
comment7.target=boolean\ isFlagged()
comment8.params=
comment8.target=java.util.Iterator\ iterator()
comment8.text=\r\n\ Allows\ a\ foreach\ loop\ to\ step\ through\ the\ neighbours\ of\ a\ MazeCell\:\r\n\ \ for\ (MazeCell\ neigh\ \:\ cell)\ {..do\ something\ to\ each\ neighbour...}\r\n
comment9.params=color
comment9.target=void\ draw(java.awt.Color)
comment9.text=\r\n\ Redraws\ a\ cell\ in\ a\ specified\ color.\r\n\ The\ area\ drawn\ includes\ the\ gap\ between\ the\ cell\ and\ its\ neighbours\r\n
numComments=14
